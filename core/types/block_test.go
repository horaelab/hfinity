// Copyright 2014 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package types

import (
	"bytes"
	"math/big"
	"reflect"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/rlp"
)

// from bcValidBlockTest.json, "SimpleTx"
func testBlockEncoding(t *testing.T) {
	blockEnc := common.FromHex("f90425f9025da0f8beca68eab737633ee30d211d4237e575f956db79d9115a84bf50999a5b358ca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347944adbad663ac29392f0cfd27f35f4a7d7b585a6daa0ad9f00c98793e989630797201553db1f00688c0f82c30d5891bbc9af6b01db70a0867cdc209dc2f417b3fadedd41149f7784912c72df5dd46d7885ea7ef0097fe2a0a7fda6ef62197feda9d5cb429440c58ae0b6204e63a8e338f8e3b7f9e25e6bdfbffc0000183200b20845bc5a3309ad98301080e846765746888676f312e31302e338664617277696ea00000000000000000000000000000000000000000000000000000000000000000880000000000000000b84333203078326463663066653730616463356230306164396637313333323037373532366530313261623734326632613939336134393562653133656639373535666633018080800280f901c1f901be808083200b208080b9016cf9016901944adbad663ac29392f0cfd27f35f4a7d7b585a6daa00000000000000000000000000000000000000000000000000000000000000000b885332030786165613536383131633634663938643939383832653333616163623836376238303663626233366234383737316136343932633464313039393538386534622030783935653963623934356635613835363030356261336462303365666663643235666431316464633838356438376431303039376437373363313133376230349065313765343563343364383330326162b898656e6f64653a2f2f6531376534356334336438333032616237383465343239646338383766336236373464373861616237306162396662383138346162656138303637363031633430643265306337636231363863626166633632626333363766363032323738653339386661356263643834616463303935613236626536316239666636643236403132372e302e302e313a3330333033820352a0387367ec572b23588817d13ad38bb8c5b0017a3ced6b3ad5296e804bd9601253a05c341e6feb1c5e7f749536b73496b2211253406a00faebcb5ccc2e7e615590088181c0")
	var block Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	check := func(f string, got, want interface{}) {
		if !reflect.DeepEqual(got, want) {
			t.Errorf("%s mismatch: got %v, want %v", f, got, want)
		}
	}

	check("Difficulty", block.Difficulty(), big.NewInt(2))
	check("GasLimit", block.GasLimit(), uint64(4290772993))
	check("GasUsed", block.GasUsed(), uint64(2100000))
	check("Coinbase", block.Coinbase(), common.HexToAddress("4aDBAd663Ac29392F0CFD27f35f4a7d7b585a6DA"))
	check("MixDigest", block.MixDigest(), common.HexToHash("0000000000000000000000000000000000000000000000000000000000000000"))
	check("Root", block.Root(), common.HexToHash("ad9f00c98793e989630797201553db1f00688c0f82c30d5891bbc9af6b01db70"))
	check("Hash", block.Hash(), common.HexToHash("42ac7ea33cd1ed8fc51deee54ce385a205ae407387777a9e844328159ff0a33d"))
	check("Nonce", block.Nonce(), uint64(0))
	check("Time", block.Time(), big.NewInt(1539679024))
	check("Size", block.Size(), common.StorageSize(len(blockEnc)))

	check("len(Transactions)", len(block.Transactions()), 1)

	ourBlockEnc, err := rlp.EncodeToBytes(&block)
	if err != nil {
		t.Fatal("encode error: ", err)
	}
	if !bytes.Equal(ourBlockEnc, blockEnc) {
		t.Errorf("encoded block mismatch:\ngot:  %x\nwant: %x", ourBlockEnc, blockEnc)
	}
}
