// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package replica

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*replicaMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r Replica) MarshalJSON() ([]byte, error) {
	type Replica struct {
		Id        math.HexOrDecimal64 `json:"id"`
		Address   common.Address      `json:"address"`
		PublicKey []byte              `json:"publicKey"`
		NodeId    string              `json:"nodeId"`
		Enode     string              `json:"enode"`
	}
	var enc Replica
	enc.Id = math.HexOrDecimal64(r.Id)
	enc.Address = r.Address
	enc.PublicKey = r.PublicKey
	enc.NodeId = r.NodeId
	enc.Enode = r.Enode
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *Replica) UnmarshalJSON(input []byte) error {
	type Replica struct {
		Id        *math.HexOrDecimal64 `json:"id"`
		Address   *common.Address      `json:"address"`
		PublicKey []byte               `json:"publicKey"`
		NodeId    *string              `json:"nodeId"`
		Enode     *string              `json:"enode"`
	}
	var dec Replica
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Id != nil {
		r.Id = uint64(*dec.Id)
	}
	if dec.Address != nil {
		r.Address = *dec.Address
	}
	if dec.PublicKey != nil {
		r.PublicKey = dec.PublicKey
	}
	if dec.NodeId != nil {
		r.NodeId = *dec.NodeId
	}
	if dec.Enode != nil {
		r.Enode = *dec.Enode
	}
	return nil
}
