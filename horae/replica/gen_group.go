// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package replica

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common"
)

// MarshalJSON marshals as JSON.
func (g Group) MarshalJSON() ([]byte, error) {
	type Group struct {
		Index       uint64
		Address     common.Address
		GroupPubKey []byte
		Members     []common.Address
		MemPubKeys  [][]byte
		Failed      bool
	}
	var enc Group
	enc.Index = g.Index
	enc.Address = g.Address
	enc.GroupPubKey = g.GroupPubKey
	enc.Members = g.Members
	enc.MemPubKeys = g.MemPubKeys
	enc.Failed = g.Failed
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *Group) UnmarshalJSON(input []byte) error {
	type Group struct {
		Index       *uint64
		Address     *common.Address
		GroupPubKey []byte
		Members     []common.Address
		MemPubKeys  [][]byte
		Failed      *bool
	}
	var dec Group
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Index != nil {
		g.Index = *dec.Index
	}
	if dec.Address != nil {
		g.Address = *dec.Address
	}
	if dec.GroupPubKey != nil {
		g.GroupPubKey = dec.GroupPubKey
	}
	if dec.Members != nil {
		g.Members = dec.Members
	}
	if dec.MemPubKeys != nil {
		g.MemPubKeys = dec.MemPubKeys
	}
	if dec.Failed != nil {
		g.Failed = *dec.Failed
	}
	return nil
}
